import tensorflow as tf
import numpy as np

def is_prime(n):
    if n <= 1:
        return 0
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return 0
    return 1

# Generate training and test data
train_data = np.array([[i] for i in range(2, 10000)], dtype=float)
train_labels = np.array([[is_prime(i)] for i in range(2, 10000)], dtype=float)

test_data = np.array([[i] for i in range(10001, 10201)], dtype=float)
test_labels = np.array([[is_prime(i)] for i in range(10001, 10201)], dtype=float)

# Build the neural network model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(units=16, activation='relu', input_shape=[1]),
    tf.keras.layers.Dense(units=32, activation='relu'),
    tf.keras.layers.Dense(units=1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(train_data, train_labels, epochs=10)

# Evaluate the model
loss, accuracy = model.evaluate(test_data, test_labels)
print(f"Test accuracy: {accuracy * 100:.2f}%")

# Test with some new numbers
new_numbers = np.array([[10223], [10243], [10247], [10253]], dtype=float)
predictions = model.predict(new_numbers)

# Round predictions to get the label and print the results
rounded_predictions = [round(x[0]) for x in predictions]
print("Predictions for numbers 10223, 10243, 10247, 10253 are (rounded):", rounded_predictions)
